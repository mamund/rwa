


Network Working Group                                        M. Amundsen
Internet-Draft                                      Layer 7 Technologies
Expires: September 2, 2013                                 L. Richardson
                                                           March 1, 2013


               Application-Level Profile Semantics (ALPS)
                   draft-amundsen-richardson-alps-00

Abstract

   This document describes ALPS, a data format for defining simple
   descriptions of application-level semantics, similar in complexity to
   HTML microformats.  An ALPS document can be used as a profile to
   explain the application semantics of a document with an application-
   agnostic media type (such as HTML, HAL, Collection+JSON, or Siren).
   This increases the reusability of profile documents across media
   types.

Editorial Note (To be removed by RFC Editor)

   Distribution of this document is unlimited.  Comments should be sent
   to the IETF Media-Types mailing list (see
   <https://www.ietf.org/mailman/listinfo/media-types>).

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on September 2, 2013.

Copyright Notice

   Copyright (c) 2013 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal



Amundsen & Richardson   Expires September 2, 2013               [Page 1]

Internet-Draft     Application-Level Profile Semantics        March 2013


   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  4
     1.1.  Notational Conventions . . . . . . . . . . . . . . . . . .  4
     1.2.  Motivation . . . . . . . . . . . . . . . . . . . . . . . .  4
       1.2.1.  Describing Domain-Specific Semantics . . . . . . . . .  4
       1.2.2.  ALPS-based Server Implementations  . . . . . . . . . .  5
       1.2.3.  ALPS-based Client Implementations  . . . . . . . . . .  5
     1.3.  A Simple ALPS Example  . . . . . . . . . . . . . . . . . .  5
     1.4.  Identifying an ALPS Document . . . . . . . . . . . . . . .  6
   2.  ALPS Documents . . . . . . . . . . . . . . . . . . . . . . . .  6
     2.1.  Compliance . . . . . . . . . . . . . . . . . . . . . . . .  6
     2.2.  ALPS Document Properties . . . . . . . . . . . . . . . . .  7
       2.2.1.  'alps' . . . . . . . . . . . . . . . . . . . . . . . .  7
       2.2.2.  'appears'  . . . . . . . . . . . . . . . . . . . . . .  7
       2.2.3.  'cardinality'  . . . . . . . . . . . . . . . . . . . .  8
       2.2.4.  'doc'  . . . . . . . . . . . . . . . . . . . . . . . .  8
       2.2.5.  'descriptor' . . . . . . . . . . . . . . . . . . . . .  9
       2.2.6.  'ext'  . . . . . . . . . . . . . . . . . . . . . . . . 10
       2.2.7.  'format' . . . . . . . . . . . . . . . . . . . . . . . 11
       2.2.8.  'href' . . . . . . . . . . . . . . . . . . . . . . . . 11
       2.2.9.  'id' . . . . . . . . . . . . . . . . . . . . . . . . . 11
       2.2.10. 'link' . . . . . . . . . . . . . . . . . . . . . . . . 12
       2.2.11. 'name' . . . . . . . . . . . . . . . . . . . . . . . . 12
       2.2.12. 'rel'  . . . . . . . . . . . . . . . . . . . . . . . . 13
       2.2.13. 'type' . . . . . . . . . . . . . . . . . . . . . . . . 13
       2.2.14. 'value'  . . . . . . . . . . . . . . . . . . . . . . . 13
       2.2.15. 'version'  . . . . . . . . . . . . . . . . . . . . . . 14
     2.3.  ALPS Representations . . . . . . . . . . . . . . . . . . . 14
       2.3.1.  Sample HTML  . . . . . . . . . . . . . . . . . . . . . 14
       2.3.2.  XML Representation . . . . . . . . . . . . . . . . . . 14
       2.3.3.  JSON Representation  . . . . . . . . . . . . . . . . . 15
   3.  Instructions on Applying ALPS to Existing Media Types  . . . . 18
     3.1.  A Simple ALPS Document . . . . . . . . . . . . . . . . . . 18
     3.2.  HTML Example . . . . . . . . . . . . . . . . . . . . . . . 18
     3.3.  Collection+JSON Example  . . . . . . . . . . . . . . . . . 18
     3.4.  Linking to ALPS Documents  . . . . . . . . . . . . . . . . 18
   4.  The ALPS Registry  . . . . . . . . . . . . . . . . . . . . . . 19
     4.1.  What is the ALPS Registry  . . . . . . . . . . . . . . . . 19



Amundsen & Richardson   Expires September 2, 2013               [Page 2]

Internet-Draft     Application-Level Profile Semantics        March 2013


     4.2.  Searching the Registry . . . . . . . . . . . . . . . . . . 19
     4.3.  Contributing to the Registry . . . . . . . . . . . . . . . 19
   5.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 19
     5.1.  application/alps+xml . . . . . . . . . . . . . . . . . . . 19
     5.2.  application/alps+json  . . . . . . . . . . . . . . . . . . 20
   6.  Internationalization Considerations  . . . . . . . . . . . . . 22
   7.  Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . 22
   8.  References . . . . . . . . . . . . . . . . . . . . . . . . . . 22
     8.1.  Normative References . . . . . . . . . . . . . . . . . . . 22
     8.2.  Informative References . . . . . . . . . . . . . . . . . . 22









































Amundsen & Richardson   Expires September 2, 2013               [Page 3]

Internet-Draft     Application-Level Profile Semantics        March 2013


1.  Introduction

   This document describes ALPS, a media type for defining simple
   descriptions of application-level semantics, similar in complexity to
   HTML microformats.  These descriptions contain both human-readable
   and machine-readable explanations of the semantics.

   An ALPS document can be used as a profile to explain the application
   semantics of a document with an application-agnostic media type (such
   as HTML, HAL, Collection+JSON, or Siren).

   This document identifies a registry for ALPS documents, and sets a
   standard for creating and registering ALPS document identifiers with
   that registry.

   This document also identifies a registry for normative human-readable
   instructions on applying an ALPS document as a profile to a document
   with a given media type.  It sets a standard for registering media
   types with that registry.  It gives some non-normative examples in
   which a single ALPS document is applied as a profile to documents
   with different media types.

   This document registers two media-type identifiers with the IANA:
   'application/alps+xml' ("ALPS+XML") and 'application/alps+json'
   ("ALPS+JSON").

1.1.  Notational Conventions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].

1.2.  Motivation

   When implementing a hypermedia client/server application using a
   general media type (HTML, Atom, Collection+JSON, etc.), client and
   server instances need to share an understanding of domain-specific
   information such as data element names, link relation values, and
   state transfer parameters.  This information is directly related to
   the application being implemented (i.e. accounting, contact
   management, etc.) rather than the media type used in the
   representations.

1.2.1.  Describing Domain-Specific Semantics

   Instead of creating and registering an entirely new media type (i.e.
   'application/accounting'), representation authors can create an ALPS
   document that describes a "profile" of the target domain; one that



Amundsen & Richardson   Expires September 2, 2013               [Page 4]

Internet-Draft     Application-Level Profile Semantics        March 2013


   explains the vital domain-specific semantic descriptors and state
   transitions.  This profile can then be consistently applied to a wide
   range of media types by server implementors and successfully consumed
   by client applications.  The focus on defining application-level
   semantics independent of transfer protocol or media type makes it
   possible to serve application-specific representations using an
   application-agnostic media type.

1.2.2.  ALPS-based Server Implementations

   Server implementors can use ALPS documents as a basis for building
   domain-specific solutions without having to create their own custom
   media type or re-invent the vocabulary and transition set for a
   common domain (e.g. accounting, microblogging, etc.).  Using a
   preexisting ALPS profile as a guide, servers can map internal data to
   commonly-understood semantic descriptors and state transitions,
   increasing the likelihood that existing client applications (those
   who share the same understanding of the ALPS document) will be able
   to successfully interact with that server.

1.2.3.  ALPS-based Client Implementations

   Armed with an ALPS document as a "profile" for the received
   representation, client applications can identify the link relations
   and semantic descriptors within it.  Client applications can "code
   for the profile" and better adjust to detailed changes to the
   response layout, or even the wholesale replacement of one media type
   with another.

1.3.  A Simple ALPS Example

   This ALPS document describes [TK.]

   [TK maybe put the YouTypeItWePostIt stuff here? -mca]

   [That's complicated since it involves an unsafe state transition.  We
   wouldn't be able to show a plain JSON version.  I think a contact-
   manager type application would work better? -leonardr]

   This HTML document uses the ALPS profile to express a set of
   application-level semantics on top of the semantics defined by HTML.

   [TK]

   This HAL document uses the same profile to epress the same
   application-level semantics.

   [TK]



Amundsen & Richardson   Expires September 2, 2013               [Page 5]

Internet-Draft     Application-Level Profile Semantics        March 2013


   This JSON document uses the same profile to express the same
   application-level semantics.

   [TK]

   Since the 'application/json' media type defines no hypermedia
   controls, the ALPS profile must be brought in using the 'Link' HTTP
   header:

   Link: http://example.com/profiles/TK.alps;rel="profile"

   But with the profile in place, additional hypermedia controls become
   visible.  An understanding of the ALPS profile reveals that the
   '[TK]' property of the top-level JSON object is intended to be a
   hypermedia link.

1.4.  Identifying an ALPS Document

   An ALPS vocabulary is identified by a unique URL.  The URL MUST
   resolve to a valid ALPS document.  The server MAY use HTTP content
   negotiation to serve a human-readable description of the ALPS
   vocabulary to clients that request an HTML representation.  [TK how's
   that? or should we stick to [link rel="help"]? -leonardr :: Maybe we
   should be silent on the matter here? -mca]

   A client SHOULD NOT automatically resolve an ALPS vocabulary URL, to
   avoid overburdening its server.

   All ALPS URLs MUST be unique and all ALPS documents intended for
   public consumption SHOULD be registered with the ALPS Registry
   located at [TK].

2.  ALPS Documents

   An ALPS document contains a machine-readable collection of
   identifying strings and their human-readable explanations.  An ALPS
   document can be represented in either XML or JSON format.  This
   section identifies the general elements and properties of an ALPS
   document, their meaning, and their use, independent of how the
   document is represented.  Section 2.3 provides specific details on
   constructing a valid ALPS document in XML and in JSON format.

2.1.  Compliance

   An implementation is not compliant if it fails to satisfy one or more
   of the MUST or REQUIRED level requirements.  An implementation that
   satisfies all the MUST or REQUIRED level and all the SHOULD level
   requirements is said to be "unconditionally compliant"; one that



Amundsen & Richardson   Expires September 2, 2013               [Page 6]

Internet-Draft     Application-Level Profile Semantics        March 2013


   satisfies all the MUST level requirements but not all the SHOULD
   level requirements is said to be "conditionally compliant."

2.2.  ALPS Document Properties

   The ALPS media type defines a small set of properties.  These
   properties appear in both the XML and JSON formats.  Below is a list
   of the properties that can appear in an ALPS document.

2.2.1.  'alps'

   Indicates the root of the ALPS document.  This property is REQUIRED,
   and it SHOULD have one or more 'descriptor' (Section 2.2.5) child
   properties.

   Examples:

   XML:  <alps>...</alps>

   JSON:  {"alps" : ... }

2.2.2.  'appears'

   Indicates the appearance rules for the related 'descriptor'
   (Section 2.2.5) in a a representation.  All valid values for this
   property are terms defined in [RFC2119], and have the meaning given
   in that standard.

2.2.2.1.  Applied to a top-level 'descriptor'

   The 'appears' property MAY appear as a property of a "top level"
   'descriptor'.  This controls whether the the 'descriptor' may appear
   at the "top level"; that is, not enclosed in any other element
   defined by this ALPS document.  The formal meanings of "top level"
   and "enclosed in" vary by the media type of the representation
   document; see Section 3 for definitions.

   Examples:

   XML:  <element ... appears="MUST NOT">

   JSON:  {"element" : "{..., "appears" : "MUST NOT"}}

   Valid values for 'appears' in a top-level 'descriptor' are: "MUST",
   "SHOULD", "MAY", and "MUST NOT".  If this property does not appear,
   the value SHOULD be treated as "MUST NOT".  [TK that comes from
   microformats.  But for schema.org a better default value is "MAY".  I
   don't know which is better. -LR :: I think MA is fine and that means



Amundsen & Richardson   Expires September 2, 2013               [Page 7]

Internet-Draft     Application-Level Profile Semantics        March 2013


   no diff for top-level or enclosed descriptors! -mca]

2.2.2.2.  Applied to an enclosing 'descriptor'

   The 'appears' property MAY appear as a property of an enclosing
   'descriptor.  This controls the rules by which the referenced element
   may appear as a child of the enclosing 'descriptor'.  The formal
   meaning of "enclosing 'descriptor'" varies by the media type of the
   representation document; see Section 3 for definitions.

   Examples:

   XML:  <element ... appears="MAY">

   JSON:  {"element" : "{..., "appears" : "MAY"}}

   Valid values for 'appears' in an enclosing 'descriptor' are: "MUST",
   "SHOULD", and "MAY".  If this property does not appear, the value
   SHOULD be treated as "MAY".

2.2.3.  'cardinality'

   Indicates the number of times the related 'descriptor'
   (Section 2.2.5) can appear.  Valid values are "single" and "many".
   If this property does not appear, the value SHOULD be treated as
   "many".

   Examples:

   XML:  <element ... candinality="many">

   JSON:  {"element" : "{..., "cardinaltiy" : "many"}}

2.2.4.  'doc'

   A text field that contains free-form, usually human-readable, text.
   The 'doc' element MAY have two properties: 'href' (Section 2.2.8) and
   'format' (Section 2.2.7).  If the 'href' property appears it SHOULD
   contain a dereferencable URL that points to human-readable text.  If
   the 'format' property appears it SHOULD contain one of two possible
   values:

   1.  "text"

   2.  "html"

   If the 'format' property is set to "html" the content within the
   'description' block MUST be treated as HTML markup.  If no 'format'



Amundsen & Richardson   Expires September 2, 2013               [Page 8]

Internet-Draft     Application-Level Profile Semantics        March 2013


   property is present, the content SHOULD be treated as plain text.

   XML:  <description format="html"> <h1>Date of Birth</h1> <p>...</p>
      </description>

   JSON:  {"description" : {"format" : "text" : "value" : "Date of Birth
      ..."} }

   A 'doc' element SHOULD appear as a child of 'descriptor'
   (Section 2.2.5).  When present, it describes the meaning and use of
   the related 'descriptor'.

   XML:  <element ... > <description>...</description> </element>

   JSON:  {"element" : {...} {"description" : {"value" : "..."} }

   The 'doc' element MAY appear as a child of 'alps' (Section 2.2.1).
   When present, it describes the purpose of the ALPS document as a
   whole.

   XML:  <alps> <description>...</description> ... </apls>

   JSON:  {"alps : "description" : { "value" : "..."}, ... }

2.2.5.  'descriptor'

   Identifies a semantic descriptor.  [TK is this the right term to use
   here?  Is a link relation a semantic descriptor? -leonardr :: I think
   we're OK here.  A link rel is a semantic identifier? -mca] One or
   more 'descriptor' elements SHOULD appear as children of 'alps'
   (Section 2.2.1).  It may also appear as a child of itself; that is,
   the 'descriptor' property may be nested.

   The 'descriptor' property MUST have either an 'id' (Section 2.2.9) or
   'href' (Section 2.2.8) attribute.  It MAY have both.  Additionally,
   the 'descriptor' MAY have any of the following attributes:

   1.  'appears' (Section 2.2.2)

   2.  'cardinality' (Section 2.2.3)

   3.  'doc' (Section 2.2.4)

   4.  'ext' (Section 2.2.6)

   5.  'name' (Section 2.2.11)





Amundsen & Richardson   Expires September 2, 2013               [Page 9]

Internet-Draft     Application-Level Profile Semantics        March 2013


   6.  'type' (Section 2.2.13)

   If present, the 'href' property MUST be a dereferenceable URL that
   points to another 'descriptor' either within the current ALPS
   document or in another ALPS document.  [TK we were considering
   getting rid of href and seeing what happened. -LR :: I;m torn on this
   one.  We could insist only frag-ids are allowed, but i don't think
   that helps much. -mca]

   If 'descriptor' has an 'href' attribute, then 'descriptor' is
   inheriting all the attributes and sub-properties of the element
   pointed to by 'href'.  When 'descriptor' has a property defined
   locally, that property value takes precedence over any inherited
   property value.  Since there is no limit to the nesting of elements
   -- even ones linked remotely -- it is important to process 'all
   descriptor' chains starting from the bottom to make sure you have
   collected all the available properties and have established the
   correct value for each of them.  [TK but this contradicts the rule
   that clients should not automatically fetch ALPS documents. -leonardr
   :: fetching to resolve the descriptor chain need not be done
   'automatically', right? -mca]

2.2.6.  'ext'

   The 'ext' element can be used to extend the ALPS document with
   author-specific information.  It provides a way to customize ALPS
   documents with additional properties not covered in this
   specification.  This is an OPTIONAL element.

   The 'ext' element has two properties.  The 'href' (Section 2.2.8)
   property MUST appear for the 'ext' element.  It's value MUST be a
   value URI and it SHOULD be resolveable.  The 'value' (Section 2.2.14)
   property MAY appear for the 'ext' element.  The meaning and use of
   the value property is described in the document found by
   dereferencing the 'href' property of the 'ext' element.

   Examples:

   XML:  <ext href="http://alps.io/ext/directions" value="north south
      east west" >

   JSON:  {"ext" : {"href" : "http://alps.io/ext/directions",
      value="north south east west"}}

   The 'ext' element MAY appear as a child of the following elements:

   1.  'alps' (Section 2.2.1)




Amundsen & Richardson   Expires September 2, 2013              [Page 10]

Internet-Draft     Application-Level Profile Semantics        March 2013


   2.  'descriptor' (Section 2.2.5)

   Since the 'ext' element has no specific meaning within this
   specification, it MUST be ignored by any application that does not
   understand its meaning.

   Authors who define 'ext' elements SHOULD register these extensions
   with the ALPS Registry (see Section 4) and use the URI provided by
   the registry in the 'name' property of their extension.

2.2.7.  'format'

   Indicates whether textual content associated with the element should
   be treated as plain text ('text') or HTML ('html').  Other values for
   this attribute are undefined.  This attribute MAY appear as an
   attribute of the 'doc' (Section 2.2.4) element.

2.2.8.  'href'

   Contains a resolvable URL.

   When it appears as an attribute of 'descriptor' (Section 2.2.5),
   'href' points to another 'descriptor' either within the existing ALPS
   document or in another ALPS document.

   When it appears as an attribute of 'ext' (Section 2.2.6), 'href'
   points to an external document which provides the defintion of the
   extension.

   When it appears as an attribute of 'link' (Section 2.2.10) 'href'
   points to an external document whose relationship to the current
   document or 'descriptor' is described by the associated 'rel'
   (Section 2.2.12) property.

   When it appears as an attribute of 'doc' (Section 2.2.4), 'href'
   points to a document that contains human-readable text that describes
   the associated 'descriptor' or ALPS document.

2.2.9.  'id'

   A document-wide unique identifier for the related element.  This MAY
   appear as an attribute of an 'descriptor' (Section 2.2.5).

   The value of this attribute will appear within generic
   representations as the name of a semantic descriptor or hypermedia
   control (see Section 3 for details).  The exception is when a
   'descriptor' defines 'name' (Section 2.2.11) as well as 'id'
   (Section 2.2.9).  In that case, the value of 'name' contains the name



Amundsen & Richardson   Expires September 2, 2013              [Page 11]

Internet-Draft     Application-Level Profile Semantics        March 2013


   of the semantic descriptor or hypermedia control, and the value of
   'id' is just a unique identifier internal to the ALPS document.

   When applied to an ALPS document, a URI fragment identifier points to
   the 'descriptor' with the appropriate 'id'.  For example, the
   fragment identifier "customer" in the URI
   http://example.com/#customer refers to an ALPS 'desdriptor' with 'id'
   set to "customer".

   A relative URL with a fragment identifier (e.g. "#customer") refers
   to an 'descriptor' within the ALPS document containing the reference.

   The complete URI to an ALPS 'descriptor' (including the fragement)
   forms an "abstract semantic type" identifier.  This is a resolvable
   URI (URL) that can be used to indicate the type of a resource; for
   instance, it can be used as the value of the IANA-registered link
   relation "type".

   A 'descrtiptor' that defines a state transition establishes an
   extension link relation whose name is the unqualified URI of the
   element. (e.g. rel="http://example.com/#purchased-by") However,
   within representations that include the defining ALPS document as a
   profile, the descriptor's 'id' may be used on its own as a registered
   link relation. (e.g. rel="purchased-by")

   For this reason, when selecting 'id' values and defining 'descriptor'
   semantics, it is important to avoid creating conflicts with existing
   IANA-registered values.  If it is unclear whether a registered link
   relation in a representation document refers to a relation registered
   with IANA or a relation registered in an ALPS profile, the semantics
   of that link are undefined.

2.2.10.  'link'

   Identifies a link between the current ALPS element and some other
   (possibly external) resource.  Can be applied to the 'alps'
   (Section 2.2.1) and the 'descriptor' (Section 2.2.5) elements.

   The 'link' property MUST define the two attributes 'href'
   (Section 2.2.8) and 'rel' (Section 2.2.12).

2.2.11.  'name'

   Indicates the name of the 'descriptor' (Section 2.2.5) as found in
   generic representations.  It MAY appear as a property of
   'descriptor'.

   This is used when the name of the 'descriptor' is used as an 'id'



Amundsen & Richardson   Expires September 2, 2013              [Page 12]

Internet-Draft     Application-Level Profile Semantics        March 2013


   (Section 2.2.9) value elsewhere in the ALPS document.  For instance,
   if a single ALPS document defines a semantic descriptor called
   "customer" and a safe-idempotent control called "customer", they
   can't both have 'id="customer"' in the ALPS document.  One of them
   needs to have some other 'id', and to set 'name="customer"'.  [TK now
   that we say that a semantic descriptor can also be a safe-idempotent
   control, i think this is either unnecessary, or we can say that the
   use of name is a design smell. -leonardr :: if we use ALPS to
   describe and existing design, this may be unavoidable. --mca]

2.2.12.  'rel'

   Contains a [RFC5988] approved value: either an extension link
   relation (a URI) or a registered link relation (a short string).

   Appears as a property of link (Section 2.2.10).

   A link relation defined within an ALPS document MAY NOT be used as a
   registered link relation within the same document.  [TK MAY NOT or
   SHOULD NOT? -mca]

2.2.13.  'type'

   Indicates the type of representation control to which the element is
   applied.  This MUST appear for each element.  Four valid values are
   defined:

   "descriptor"  A state element (e.g.  HTML.SPAN, HTML.INPUT, etc.)  OR
      a hypermedia control that triggers a safe, idempotent transition
      (e.g.  HTTP.GET or HTTP.HEAD).

   "safe"  A hypermedia control that triggers a safe, idempotent state
      transition (e.g.  HTTP.GET or HTTP.HEAD).

   "idempotent"  A hypermedia control that triggers an unsafe,
      idempotent state transition (e.g.  HTTP.PUT or HTTP.DELETE).

   "unsafe"  A hypermedia control that triggers an unsafe, non-
      idempotent state transition (e.g.  HTTP.POST).

   If no 'type' attribute is associated with the element then the
   'type="descriptor"' is implied.

2.2.14.  'value'

   Contains a string value.  It MAY appear as an attribute of the 'doc'
   (Section 2.2.4) and the 'ext' (Section 2.2.6) elements.




Amundsen & Richardson   Expires September 2, 2013              [Page 13]

Internet-Draft     Application-Level Profile Semantics        March 2013


2.2.15.  'version'

   Indicates the version of the ALPS specification used in the document.
   This SHOULD appear as a property of the 'alps' (Section 2.2.1)
   property.  Currently the only valid value is "1.0".  If no value
   appears, then 'version="1.0"' is implied.

2.3.  ALPS Representations

   An ALPS document may be represented in either XML or JSON format.
   This section contains notes on how the ALPS elements and attributes
   appear in each format, along with examples to guide ALPS document
   authors.

2.3.1.  Sample HTML

   Below is a simple HTML document that contains a handful of semantic
   descriptors and transition instructions.  This document was genrated
   from the XML and JSON ALPS documents that follow.  Use this HTML
   document as a guide when evaluating the XML and JSON examples.

   <!-- sample HTML document -->
   <html>
       <head>
           <link rel="profile" href="http://alps.io/documents/search" />
       </head>
       <body>
           <form class="search" action="..." method="get">
               <input type="text" name="search" value="..." />
               <select name="resultType">
                   <option value="summary" />
                   <option value="detailed" />
               </select>
               <input type="submit" />
           </form>
       </body>
   </html>

                                HTML Sample

2.3.2.  XML Representation

2.3.2.1.  XML Representation Notes

   In the XML version of an ALPS document, the following ALPS properties
   always appear as XML elements: 'alps' (Section 2.2.1), 'doc'
   (Section 2.2.4), 'descriptor' (Section 2.2.5), and 'ext'
   (Section 2.2.6).  All other ALPS properties appear as XML attributes.



Amundsen & Richardson   Expires September 2, 2013              [Page 14]

Internet-Draft     Application-Level Profile Semantics        March 2013


2.3.2.2.  Complete XML Representation

   Below is an example of an applcation/alps+xml representation.

   <?xml version="1.0"?>
   <alps version="1.0">
       <doc href="http://example.org/samples/full/doc.html" />

       <descriptor id="search"
           type="safe"
           cardinality="single"
           appears="MUST NOT">
           <doc format="text">
               A search form with a two inputs.
           </doc>
           <descriptor href="#resultType" />
           <descriptor id="value"
               name="search"
               type="semantic"
               cardinality="single"
               appears="MAY">
               <ddoc>input for search</doc>
           </descriptor>
       </descriptor>

       <descriptor id="resultType"
           type="semantic"
           cardinality="single"
           appears="MAY"
           <doc>results format</doc>
           <ext
               href="http://alps.io/ext/range"
               value="summary,detail" />
       </element>
   </alps>

                        Complete XML Representation

2.3.3.  JSON Representation

2.3.3.1.  JSON Representation Notes

   When representing ALPS documents in JSON format, the 'descriptor'
   (Section 2.2.5) and 'ext' (Section 2.2.6) properties are always
   expressed as arrays of anonymous objects - even when there is only
   one member in the array.





Amundsen & Richardson   Expires September 2, 2013              [Page 15]

Internet-Draft     Application-Level Profile Semantics        March 2013


   For example:

   "descriptor" : [
       {
           "id" : "search",
           "type" : "safe"
           "descriptor" : [
               {"href" : "#value"},
               {
                   "id" : "resultType",
                   "type" : "semantic",
                   "ext" : [
                       {
                           "href" : "http://alps.io/ext/range",
                           "value" : "summary,detail"
                       }
                   ]
               }
           ]
       },
       {
           "id" : "#value",
           "type" : "semantic"
       }
   ]

                            Arrays in ALPS+JSON

   The 'doc' (Section 2.2.4) property is always expressed as a named
   object.

   For example:

   {
       "doc" : {
           "format" : "text",
           "value" : "Rules are imporant"
       }
   }

                         Descriptions in ALPS+JSON

2.3.3.2.  Complete Representation

   Below is a example of the application/alps+json representation of an
   ALPS document.





Amundsen & Richardson   Expires September 2, 2013              [Page 16]

Internet-Draft     Application-Level Profile Semantics        March 2013


   // http://alps.io/documents/search
   {
       "alps" : {
           "version" : "1.0",
           "doc" : {
               "href" : "http://example.org/samples/full/doc.html"
           },
           "descriptor" : [
               {
                   "id" : "search",
                   "type" : "safe",
                   "cardinality" : "single",
                   "appears" : "MUST NOT",
                   "doc" : {"value" :
                       "A search form with a two inputs"
                   },
                   "descriptor" : [
                       {
                           "id" : "value",
                           "name" : "search",
                           "type" : "descriptor",
                           "cardinality" : "single",
                           "appears" : "MAY",
                           "doc" : {"value" : "input for search"}
                       },
                       {"href" : "#resultType"}
                   ]
               },
              {
                   "id" : "resultType",
                   "type" : "descriptor",
                   "cardinality" : "single",
                   "appears" : "MAY",
                   "description" : {"value" : "results format"},
                   "ext" : [
                       {
                           "href" : "http://alps.io/ext/range",
                           "value" : "summary,detail"
                       }
                   ]
               }
           ]
       }
   }

                     Complete ALPS+JSON Representation





Amundsen & Richardson   Expires September 2, 2013              [Page 17]

Internet-Draft     Application-Level Profile Semantics        March 2013


3.  Instructions on Applying ALPS to Existing Media Types

   An ALPS document can be applied to many existing hypermedia types.
   Below are a set of instructional examples on how to apply ALPS
   information to existing media types.  These examples are informative.
   The most up-to-date guidance on applying ALPS documents to existing
   media types are available at the official ALPS Web site
   (http://alps.io).  [I implied earlier there would be a formal
   registry. -leonardr]

   [LR:say what it takes to explain how alps applies to a media type you
   have to define "enclosing element", "link", etc]

   [It looks like this section repeats the example at the beginning.  It
   should suffice at this point to simply spell out the informative
   rules.]

3.1.  A Simple ALPS Document

   [TK]

3.2.  HTML Example

   [TK]

3.3.  Collection+JSON Example

3.4.  Linking to ALPS Documents

   To indicate that an ALPS profile describes the semantics of some
   representation document, the representation document MUST be linked
   to the ALPS document using the "profile" link relation (found in the
   IANA registry of link relations).  [TK I changed should to must.
   -leonardr :: Which means no one can EVER use Link header or media-
   type "profile" methods. is that what we want? -mca] If the media type
   of the representation document has no native ability to link to other
   resources, or no ability to express link relations, the HTTP header
   'Link' [RFC5988] MAY be used to connect the representation document
   and the ALPS profile.

   A single representation document may be described by more than one
   ALPS profile.  If two ALPS profiles give conflicting semantics for
   the same element, the document linked to earlier in the
   representation SHOULD take precedence.  A profile linked to using the
   'Link' header takes precedence over a profile linked to within the
   representation document itself.





Amundsen & Richardson   Expires September 2, 2013              [Page 18]

Internet-Draft     Application-Level Profile Semantics        March 2013


4.  The ALPS Registry

4.1.  What is the ALPS Registry

   [TK]

4.2.  Searching the Registry

   [TK]

4.3.  Contributing to the Registry

   [TK]

5.  IANA Considerations

   This specification establishes two media types: 'application/
   alps+xml' and 'application/alps+json'

5.1.  application/alps+xml

   Type name:  application

   Subtype name:  alps+xml

   Required parameters:  None

   Optional parameters:

      charset  This parameter has identical semantics to the charset
         parameter of the 'application/xml' media type as specified in
         [RFC3023].

      profile  A whitespace-separated list of IRIs identifying specific
         constraints or conventions that apply to an ALPS document.  A
         profile must not change the semantics of the resource
         representation when processed without profile knowledge, so
         that clients both with and without knowledge of a profiled
         resource can safely use the same representation.  The profile
         parameter may also be used by clients to express their
         preferences in the content negotiation process.  It is
         recommended that profile IRIs are dereferenceable and provide
         useful documentation at that IRI.








Amundsen & Richardson   Expires September 2, 2013              [Page 19]

Internet-Draft     Application-Level Profile Semantics        March 2013


   Encoding considerations:

      binary  Same as encoding considerations of application/xml as
         specified in [RFC3023].

   Security considerations:  This format shares security issues common
      to all XML content types.  It does not provide executable content.
      Information contained in ALPS documents do not require privacy or
      integrity services.

   Interoperability considerations:  ALPS is not described by a DTD and
      applies only the well-formedness rules of XML.  It should only be
      parsed by a non-validating parser.

   Published specification:  This Document

   Applications that use this media type:  Various

   Additional information:

      magic number(s):  none

      file extensions:  .xml

      macintosh type file code:  TEXT

      object idenfiers:  none

   person to contact for further information:

      Name:  Mike Amundsen

      Email:  mca@amundsen.com

   Intended usage:  Common

   Author/change controller:  Mike Amundsen

5.2.  application/alps+json

   Type name:  application

   Subtype name:  alps+json

   Required parameters:  None






Amundsen & Richardson   Expires September 2, 2013              [Page 20]

Internet-Draft     Application-Level Profile Semantics        March 2013


   Optional parameters:

      profile  A whitespace-separated list of IRIs identifying specific
         constraints or conventions that apply to an ALPS document.  A
         profile must not change the semantics of the resource
         representation when processed without profile knowledge, so
         that clients both with and without knowledge of a profiled
         resource can safely use the same representation.  The profile
         parameter may also be used by clients to express their
         preferences in the content negotiation process.  It is
         recommended that profile IRIs are dereferenceable and provide
         useful documentation at that IRI.

   Encoding considerations:  binary

   Security considerations:  This media type shares security issues
      common to all JSON content types.  See [RFC4627] Section #6 for
      additional information.  ALPS+JSON does not provide executable
      content.  Information contained in ALPS+JSON documents do not
      require privacy or integrity services.

   Interoperability considerations:  None

   Published specification:  This Document

   Applications that use this media type:  Various

   Additional information:

      magic number(s):  none

      file extensions:  .json

      macintosh type file code:  TEXT

      object idenfiers:  none

   person to contact for further information:

      Name:  Mike Amundsen

      Email:  mca@amundsen.com

   Intended usage:  Common







Amundsen & Richardson   Expires September 2, 2013              [Page 21]

Internet-Draft     Application-Level Profile Semantics        March 2013


   Author/change controller:  Mike Amundsen

6.  Internationalization Considerations

   [TK]

   [[anchor18: insert text (consider rfc 5987)]]

7.  Acknowledgements

   [TK]

8.  References

8.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC3023]  Murata, M., St. Laurent, S., and D. Kohn, "XML Media
              Types", RFC 3023, January 2001.

   [RFC4627]  Crockford, D., "The application/json Media Type for
              JavaScript Object Notation (JSON)", RFC 4627, July 2006.

   [RFC5988]  Nottingham, M., "Web Linking", RFC 5988, October 2010.

8.2.  Informative References

Authors' Addresses

   Mike Amundsen
   Layer 7 Technologies

   EMail: mca@amundsen.com
   URI:   http://amundsen.com


   Leonard Richardson

   EMail: leonardr@segfault.org
   URI:   http://crummy.com









Amundsen & Richardson   Expires September 2, 2013              [Page 22]

