


Network Working Group                                        M. Amundsen
Internet-Draft                                      Layer 7 Technologies
Expires: August 31, 2013                                   L. Richardson
                                                       February 27, 2013


               Application-Level Profile Semantics (ALPS)
                   draft-amundsen-richardson-alps-00

Abstract

   This document describes a media type for defining application-level
   semantic descriptions (similar to those defined by HTML microformats)
   in a way that incorporates both human-readable documentation and
   machine-readable instructions on applying semantic descriptions to
   elements within a wide range of media-type representations.

Editorial Note (To be removed by RFC Editor)

   Distribution of this document is unlimited.  Comments should be sent
   to the IETF Media-Types mailing list (see
   <https://www.ietf.org/mailman/listinfo/media-types>).

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on August 31, 2013.

Copyright Notice

   Copyright (c) 2013 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of



Amundsen & Richardson    Expires August 31, 2013                [Page 1]

Internet-Draft     Application-Level Profile Semantics     February 2013


   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.













































Amundsen & Richardson    Expires August 31, 2013                [Page 2]

Internet-Draft     Application-Level Profile Semantics     February 2013


Table of Contents

   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  4
     1.1.  Notational Conventions . . . . . . . . . . . . . . . . . .  4
     1.2.  Motivation . . . . . . . . . . . . . . . . . . . . . . . .  4
     1.3.  A Simple ALPS Example  . . . . . . . . . . . . . . . . . .  4
     1.4.  Identifying an ALPS Document . . . . . . . . . . . . . . .  4
   2.  ALPS Documents . . . . . . . . . . . . . . . . . . . . . . . .  5
     2.1.  Compliance . . . . . . . . . . . . . . . . . . . . . . . .  5
     2.2.  ALPS Document Properties . . . . . . . . . . . . . . . . .  5
       2.2.1.  'alps' . . . . . . . . . . . . . . . . . . . . . . . .  5
       2.2.2.  'appears'  . . . . . . . . . . . . . . . . . . . . . .  6
       2.2.3.  'cardinality'  . . . . . . . . . . . . . . . . . . . .  7
       2.2.4.  'child'  . . . . . . . . . . . . . . . . . . . . . . .  7
       2.2.5.  'description'  . . . . . . . . . . . . . . . . . . . .  8
       2.2.6.  'element'  . . . . . . . . . . . . . . . . . . . . . .  9
       2.2.7.  'ext'  . . . . . . . . . . . . . . . . . . . . . . . .  9
       2.2.8.  'format' . . . . . . . . . . . . . . . . . . . . . . . 10
       2.2.9.  'href' . . . . . . . . . . . . . . . . . . . . . . . . 10
       2.2.10. 'id' . . . . . . . . . . . . . . . . . . . . . . . . . 11
       2.2.11. 'name' . . . . . . . . . . . . . . . . . . . . . . . . 11
       2.2.12. 'type' . . . . . . . . . . . . . . . . . . . . . . . . 11
       2.2.13. 'value'  . . . . . . . . . . . . . . . . . . . . . . . 12
       2.2.14. 'version'  . . . . . . . . . . . . . . . . . . . . . . 12
     2.3.  ALPS Representations . . . . . . . . . . . . . . . . . . . 12
       2.3.1.  Sample HTML  . . . . . . . . . . . . . . . . . . . . . 12
       2.3.2.  XML Representation . . . . . . . . . . . . . . . . . . 13
       2.3.3.  JSON Representation  . . . . . . . . . . . . . . . . . 14
   3.  Instructions on Applying ALPS to Existing Media Types  . . . . 17
     3.1.  A Simple ALPS Document . . . . . . . . . . . . . . . . . . 17
     3.2.  HTML Example . . . . . . . . . . . . . . . . . . . . . . . 17
     3.3.  Collection+JSON Example  . . . . . . . . . . . . . . . . . 17
     3.4.  Linking to ALPS Documents  . . . . . . . . . . . . . . . . 17
   4.  The ALPS Registry  . . . . . . . . . . . . . . . . . . . . . . 17
     4.1.  What is the ALPS Registry  . . . . . . . . . . . . . . . . 17
     4.2.  Searching the Registry . . . . . . . . . . . . . . . . . . 17
     4.3.  Contributing to the Registry . . . . . . . . . . . . . . . 17
   5.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 18
     5.1.  application/alps+xml . . . . . . . . . . . . . . . . . . . 18
     5.2.  application/alps+json  . . . . . . . . . . . . . . . . . . 19
   6.  Internationalization Considerations  . . . . . . . . . . . . . 20
   7.  Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . 20
   8.  References . . . . . . . . . . . . . . . . . . . . . . . . . . 20
     8.1.  Normative References . . . . . . . . . . . . . . . . . . . 20
     8.2.  Informative References . . . . . . . . . . . . . . . . . . 20






Amundsen & Richardson    Expires August 31, 2013                [Page 3]

Internet-Draft     Application-Level Profile Semantics     February 2013


1.  Introduction

   This document describes a media type for defining application-level
   semantic descriptions (similar to those defined by HTML microformats)
   in a way that incorporates both human-readable documentation and
   machine-readable instructions on applying semantic descriptions to
   elements within application-agnostic media-type representations (such
   as HTML, HAL, Collection+JSON, Siren, etc.).  This document also
   identifies an ALPS Registry, sets a standard for creating and
   registering ALPS document identifers in that registry, and provides
   suggested conventions for applying ALPS descriptions to existing
   media types.

   This document registers two media-type identifiers with the IANA:
   'application/alps+xml' ("ALPS+XML") and 'application/alps+json'
   ("ALPS+JSON").

1.1.  Notational Conventions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].

1.2.  Motivation

   When implementing a hypermedia client/server application using a
   general media type (i.e.  HTML, Atom, Collection+JSON, etc.), client
   and server instances need to share application-specific information
   such as data element names, link relation values, and state transfer
   parameters.  This information is directly related to the application
   being implemented (i.e. accounting, contact management, etc.) rather
   than the media type used in the representations.

   Instead of creating (and registering) an entirely new media type
   (i.e. 'application/accounting'), representation authors can use an
   ALPS "profile" to apply application-level semantic descriptions to
   elements defined by the generic media type.  This increases the
   specificity of the representation without reducing the generality of
   the media type.

1.3.  A Simple ALPS Example

   [TK]

1.4.  Identifying an ALPS Document

   ALPS vocabularies are identified by a unique URL.  The URL SHOULD
   point to a valid ALPS document.  The URL MAY point to a human-



Amundsen & Richardson    Expires August 31, 2013                [Page 4]

Internet-Draft     Application-Level Profile Semantics     February 2013


   readable document that describes the ALPS specification for the
   identified use case.

   Although the URI SHOULD point to a resource that contains a
   definition of the semantics of the relation type, clients SHOULD NOT
   automatically access that resource to avoid overburdening its server.

   [I almost feel like we should have two URLs, an ALPS permalink and a
   human-readable doc.  Or should we suggest the use of content
   negotiation? -leonardr]

   All ALPS URIs MUST be unique and all ALPS documents intended for
   public consumption SHOULD be registered in the ALPS Registry located
   at [TK].

2.  ALPS Documents

   ALPS Documents contain a machine-readable collection of identifying
   strings and their human-readable explanations.  An ALPS document can
   be represented in either XML or JSON format.  This section identifies
   the general elements and properties of an ALPS document, their
   meaning, and their use.  Additional subsections provide specific
   details on how to construct a valid ALPS document in XML and in JSON
   format.

   [LR: need a section that syas URL can be used as an abstract semantic
   type]

2.1.  Compliance

   An implementation is not compliant if it fails to satisfy one or more
   of the MUST or REQUIRED level requirements.  An implementation that
   satisfies all the MUST or REQUIRED level and all the SHOULD level
   requirements is said to be "unconditionally compliant"; one that
   satisfies all the MUST level requirements but not all the SHOULD
   level requirements is said to be "conditionally compliant."

2.2.  ALPS Document Properties

   The ALPS media type defines a small set of properties.  The
   properties appear in both the XML and JSON formats, but are expressed
   in different ways.  Below is a list of the properties that can appear
   in an ALPS document.

2.2.1.  'alps'

   Indicates the root of the ALPS document.  This property SHOULD have
   one or more 'element' child properties.



Amundsen & Richardson    Expires August 31, 2013                [Page 5]

Internet-Draft     Application-Level Profile Semantics     February 2013


   Examples:

   XML:  <alps>...</alps>

   JSON:  {"alps" : ... }

2.2.2.  'appears'

   Indicates the appearance rules for the related 'element'
   (Section 2.2.6) or 'child' (Section 2.2.4) in a representation.  All
   valid values for this property are terms defined in [RFC2119], and
   have the meaning given in that standard.

2.2.2.1.  Applied to the 'element' block

   The 'appears' property MAY appear as a property of the 'element'
   block.  This controls whether the element may appear at the "top
   level"; that is, not enclosed in any other element defined by this
   ALPS document.  The formal meaning of "top level" varies by the media
   type; see Section 3 for definitions.

   Examples:

   XML:  <element ... appears="MUST NOT">

   JSON:  {"element" : "{..., "appears" : "MUST NOT"}}

   Valid values for 'appears' in an 'element' block are: "MUST",
   "SHOULD", "MAY", and "MUST NOT".  If this property does not appear,
   the value SHOULD be treated as "MUST NOT".

2.2.2.2.  Applied to the 'child' block

   The 'appears' property MAY appear as a property of a 'child' block.
   This controls the rules by which the referenced element may appear as
   a child of the enclosing 'element'.  The formal meaning of "enclosing
   'element'" varies by the media type; see Section 3 for definitions.

   Examples:

   XML:  <child ... appears="MUST NOT">

   JSON:  {"child" : "{..., "appears" : "MUST NOT"}}

   Valid values for 'appears' in an 'child' block are: "MUST", "SHOULD",
   and "MAY".  If this property does not appear, the value SHOULD be
   treated as "MAY".




Amundsen & Richardson    Expires August 31, 2013                [Page 6]

Internet-Draft     Application-Level Profile Semantics     February 2013


2.2.3.  'cardinality'

   Indicates the number of times the related 'element' (Section 2.2.6)
   or 'child' (Section 2.2.4) can appear.  Valid values are "single" and
   "many".  If this property does not appear, the value SHOULD be
   treated as "many".

2.2.3.1.  Applied to the 'element' block

   The 'cardinality' property MAY appear as a property of an 'element'
   block.  This controls how many times that element may be used at the
   "top level" within a single representation.

   Examples:

   XML:  <element ... candinality="many">

   JSON:  {"element" : "{..., "cardinaltiy" : "many"}}

2.2.3.2.  Applied to the 'child' block

   The 'cardinality' property MAY appear as a property of a 'child'
   block.  This controls how many times the 'child' element may occur
   within its enclosing element.

   Examples:

   XML:  <child ... cardinality="single">

   JSON:  {"child" : "{..., "cardinality" : "single"}}

2.2.4.  'child'

   Identifies a child of the 'element' (Section 2.2.6) block.  The
   'child' block is almost identical to the 'element' block and MUST
   only appear as a direct child of 'element.'  This is the way ALPS
   authors can reuse existing 'element' blocks in the current or any
   external ALPS document.

   The 'child' element MUST have at least an 'id' (Section 2.2.10) or
   'href' (Section 2.2.9) property.  It MAY have both.  Additionally,
   the 'child' element MAY have any of the following proeprties:

   1.  'appears' (Section 2.2.2)

   2.  'cardinality' (Section 2.2.3)





Amundsen & Richardson    Expires August 31, 2013                [Page 7]

Internet-Draft     Application-Level Profile Semantics     February 2013


   3.  'description' (Section 2.2.5)

   4.  'ext' (Section 2.2.7)

   5.  'name' (Section 2.2.11)

   6.  'type' (Section 2.2.12)

   The 'href' property MUST be a dereferencable URL that points to
   another 'element' block either within the current ALPS document or in
   another document.  If the 'child' element has an 'href' property, any
   other properties of the 'child' element (e.g. 'appears',
   'cardinality', etc.)  MUST override corresponding properties in the
   referred 'element'.

2.2.5.  'description'

   A text field that contains free-form, usually human-readable, text.

   A 'description' block SHOULD appear as a child of 'element'
   (Section 2.2.6).  When present, it describes the meaning and use of
   the related 'element'.

   XML:  <element ... > <description>...</description> </element>

   JSON:  {"element" : {...} {"description" : {"value" : "..."} }

   A 'description' block MAY appear as a child of the 'child'
   (Section 2.2.4) block.  When present, it describes the meaning of the
   relationship between the 'element' and its 'child'.

   XML:  <child ... > <description>...</description> </child>

   JSON:  {"child" : {...} {"description" : {"value" : "..."} }

   A 'description' block MAY appear as a child of 'alps'
   (Section 2.2.1).  When present, it describes the purpose of the ALPS
   document as a whole.

   XML:  <alps> <description>...</description> ... </apls>

   JSON:  {"alps : "description" : { "value" : "..."}, ... }

   The 'description' element has one OPTIONAL sub-element: 'format'
   (Section 2.2.8) with two possible values:

   1.  "text"




Amundsen & Richardson    Expires August 31, 2013                [Page 8]

Internet-Draft     Application-Level Profile Semantics     February 2013


   2.  "html"

   If the 'format' property is set to "html" the content within the
   'description' block MUST be treated as HTML markup.  If no 'format'
   property is present, the content SHOULD be treated as plain text.

   XML:  <description format="html"> <h1>Date of Birth</h1> <p>...</p>
      </description>

   JSON:  {"description" : {"format" : "text" : "value" : "Date of Birth
      ..."} }

2.2.6.  'element'

   Identifies a semantic descriptor.  One or more 'element' blocks
   SHOULD appear as children of the 'alps' (Section 2.2.1) block.

   The 'element' property MUST have an 'id' (Section 2.2.10) property.
   It SHOULD have an 'appears' (Section 2.2.2) and a 'type'
   (Section 2.2.12) property.  See the documentation for these
   properties for the default values when they are missing.

   The 'element' MAY have the following properties:

   1.  'cardinality' (Section 2.2.3)

   2.  'child' (Section 2.2.4)

   3.  'description' (Section 2.2.5)

   4.  'ext' (Section 2.2.7)

   5.  'name' (Section 2.2.11)

2.2.7.  'ext'

   The 'ext' element can be used to extend the ALPS document with
   author-specific information.  It provides a way to customize ALPS
   documents with additional properties not covered in this
   specification.  This is an OPTIONAL element.

   The 'ext' element has to properties.  The 'href' (Section 2.2.9)
   property MUST appear for the 'ext' element.  It's value MUST be a
   URI.  The 'value' (Section 2.2.13) property MAY appear for the 'ext'
   element.  The meaning and use of the value property is described in
   the document found by dereferencing the 'href' property of the 'ext'
   element.




Amundsen & Richardson    Expires August 31, 2013                [Page 9]

Internet-Draft     Application-Level Profile Semantics     February 2013


   Examples:

   XML:  <ext href="http://alps.io/extensions/range.alps" value="north
      south east west" >

   JSON:  {"ext" : {"href" : "http://alps.io/extensions/range.alps",
      value="north south east west"}}

   The 'ext' element MAY appear as a child of the following elements:

   1.  'alps' (Section 2.2.1)

   2.  'child' (Section 2.2.4)

   3.  'element' (Section 2.2.6)

   Since the 'ext' element has no specific meaning within the this
   specification, it MUST be ignored by any application that does not
   understand it's use and meaning.

   Authors who define 'ext' elements SHOULD register these extensions
   with the ALPS Registry (see Section 4) and use the URI provided by
   the registry in the 'name' property of their extension.

2.2.8.  'format'

   Indicates whether the associated content in the should be treated as
   'text' or 'html'.  This property MAY appear as a property of the
   'description' (Section 2.2.5) element.

2.2.9.  'href'

   Points to an 'element' (Section 2.2.6) either within the existing
   ALPS document or in another ALPS document.

   The 'href' attribute MUST appear as part of the 'child'
   (Section 2.2.4) element.  The value MUST be a valid URL, with a
   fragment identifier, resolving to an 'element' within an ALPS
   document.

   [TK let's talk about these items - MCA]

   [Should <alps> itself support +href+ so it can link to itself or a
   full human-readable doc?  Or should we allow a general <link> tag so
   you can do rel="help"?]

   [I have a half-baked idea about using +href+ within 'element' as
   well.  This would let you copy the +fn+ descriptor defined in hCard



Amundsen & Richardson    Expires August 31, 2013               [Page 10]

Internet-Draft     Application-Level Profile Semantics     February 2013


   into your custom ALPS document (for performance reasons) but still
   make it clear that your +fn+ descriptor has the same meaning as the
   one defined in hCard. -leonardr]

2.2.10.  'id'

   A document-wide unique identifier for the related element.  This MUST
   appear as a property of each 'element' (Section 2.2.6).

   The value of this property will appear within generic representations
   as the name of a semantic descriptor or hypermedia control (see
   Section 3 for details).  The exception is when an element defines
   'name' (Section 2.2.11) as well as 'id' (Section 2.2.10).  In that
   case, the value of 'name' contains the name of the semantic
   descriptor or hypermedia control, and the value of 'id' is just a
   unique internal identifier for the current document.

   When applied to an ALPS document, a URI fragment identifier points to
   the element with the appropriate 'id''.  For example, the fragment
   identifier "customer" in the URI http://example.com/#customer refers
   to an ALPS element with 'id' set to "customer".

   A relative URL with a fragment identifier (e.g. "#customer") refers
   to an element within the ALPS document containing the reference.

2.2.11.  'name'

   Indicates the name of the 'element' (Section 2.2.6) as found in
   generic representations.  It MAY appear as a property of 'element'
   and 'child' (Section 2.2.4).

   This is used when the name of the 'element' or 'child' is used as an
   'id' (Section 2.2.10) value elsewhere in the ALPS document.  For
   instance, if a single ALPS document defines an element descriptor
   called "customer" and a safe-idempotent control called "customer",
   they can't both have 'id="customer"' in the ALPS document.  One of
   them needs to have some other 'id', and to set 'name="customer"'.

2.2.12.  'type'

   Indicates the type of representation control to which the element is
   applied.  This MUST appear for each element.  Four valid values are
   defined:

   1.  "descriptor" refers to a state element (e.g.  HTML.SPAN,
       HTML.INPUT, etc.).





Amundsen & Richardson    Expires August 31, 2013               [Page 11]

Internet-Draft     Application-Level Profile Semantics     February 2013


   2.  "safe" refers to a hypermedia control that triggers a safe,
       idempotent state transition (i.e.  HTTP.GET, HTTP.HEAD, etc.).

   3.  "idempotent" refers to a hypermedia control that triggers an
       unsafe, idempotent state transition (i.e.  HTTP.PUT, HTTP.DELETE
       etc.).

   4.  "unsafe" refers to a hypermedia control that triggers an unsafe,
       non-idempotent state transition (i.e.  HTTP.POST).

   If no 'type' property is associated with the element then the
   'type="descriptor"' is implied.

2.2.13.  'value'

   Contains a string value.  It MAY appear as a property of the
   'description' (Section 2.2.5) and the 'ext' (Section 2.2.7) elements.

2.2.14.  'version'

   Indicates the version number of the ALPS document.  This SHOULD
   appear as a property of the 'alps' (Section 2.2.1) property.
   Currently the only valid value is "1.0".  If no value appears, then
   it SHOULD be set to "1.0".

2.3.  ALPS Representations

   ALPS documents can be represented in either XML or JSON format.  This
   section contains notes on how the ALPS properties appear in each
   format along with examples to guide ALPS document authors.

2.3.1.  Sample HTML

   Below is a simple HTML document that contains a handful of semantic
   descriptors and transition instructions.  This document was genrated
   from the XML and JSON ALPS documents that follow.  Use this HTML
   document as a guide when evaluating the XML and JSON examples.














Amundsen & Richardson    Expires August 31, 2013               [Page 12]

Internet-Draft     Application-Level Profile Semantics     February 2013


   <!-- sample HTML document -->
   <html>
       <head>
           <link rel="profile" href="http://alps.io/documents/search" />
       </head>
       <body>
           <form class="search" action="..." method="get">
               <input type="text" name="search" value="..." />
               <select name="resultType">
                   <option value="summary" />
                   <option value="detailed" />
               </select>
               <input type="submit" />
           </form>
       </body>
   </html>

                                HTML Sample

2.3.2.  XML Representation

2.3.2.1.  XML Representation Notes

   In the XML version of ALPS documents, the following properties always
   appear as XML elements: 'alps' (Section 2.2.1), 'child'
   (Section 2.2.4), 'description' (Section 2.2.5), 'element'
   (Section 2.2.6), and 'ext' (Section 2.2.7).  All other ALPS
   properties appear as XML attributes.

2.3.2.2.  Complete XML Representation

   Below is an example of an applcation/alps+xml representation.



















Amundsen & Richardson    Expires August 31, 2013               [Page 13]

Internet-Draft     Application-Level Profile Semantics     February 2013


<?xml version="1.0"?>
<alps version="1.0">
    <description format="html">
        <h1>A Sample ALPS+XML Document</h1>
    </description>

    <element id="search" type="safe" cardinality="single" appears="MUST NOT">
        <description format="text">
            A search form with a two inputs.
        </description>
        <child href="#resultType" />
        <child id="value"
            name="search"
            type="descriptor"
            cardinality="single"
            appears="MAY">
            <description>input for search</description>
        </child>
    </element>

    <element id="resultType"
        type="descriptor"
        cardinality="single"
        appears="MAY"
        <description>results format</description>
        <ext href="http://alps.io/ext/range" value="summary,detail" />
    </element>
</alps>

                        Complete XML Representation

2.3.3.  JSON Representation

2.3.3.1.  JSON Representation Notes

   When representing ALPS documents in the JSON format, the 'child'
   (Section 2.2.4), 'element' (Section 2.2.6) and 'ext' (Section 2.2.7)
   properties are always express as arrays of anonymous objects - even
   when there is only one member in the array.












Amundsen & Richardson    Expires August 31, 2013               [Page 14]

Internet-Draft     Application-Level Profile Semantics     February 2013


   For example:

   "element" : [
       {
           "id" : "search",
           "type" : "safe"
           "child" : [
               {"href" : "#value"},
               {
                   "id" : "resultType",
                   "type" : "descriptor",
                   "ext" : [
                       {
                           "href" : "http://alps.io/ext/range",
                           "value" : "summary,detail"
                       }
                   ]
               }
           ]
       },
       {
           "id" : "#value",
           "type" : "descriptor"
       }

   ]

                            Arrays in ALPS+JSON

   The 'description' (Section 2.2.5) description is always expressed as
   a named object.

   For example:

   {
       "description" : {
           "format" : "text",
           "value" : "Rules are imporant"
       }
   }

                         Descriptions in ALPS+JSON

2.3.3.2.  Complete Representation

   Below is a example of the application/alps+json representation of an
   ALPS document.




Amundsen & Richardson    Expires August 31, 2013               [Page 15]

Internet-Draft     Application-Level Profile Semantics     February 2013


// http://alps.io/documents/search
{
    "alps" : {
        "version" : "1.0",
        "description" : {
        "format" : "html", "value" : "<h1>A sample ALPS+JSON document</h1>"
        },
        "element" : [
            {
                "id" : "search",
                "type" : "safe",
                "cardinality" : "single",
                "appears" : "MUST NOT",
                "description" : {"value" : "A search form with a two inputs"},
                "child" : [
                    {"href" : "#value"},
                    {"href" : "#resultType"}
                ]
            },
            {
                "id" : "value",
                "name" : "search",
                "type" : "descriptor",
                "cardinality" : "single",
                "appears" : "MAY",
                "description" : {"value" : "input for search"}
            },
            {
                "id" : "resultType",
                "type" : "descriptor",
                "cardinality" : "single",
                "appears" : "MAY",
                "description" : {"value" : "results format"},
                "ext" : [
                    {
                        "href" : "http://alps.io/ext/range",
                        "value" : "summary,detail"
                    }
                ]
            }

        ]
    }
}

                     Complete ALPS+JSON Representation





Amundsen & Richardson    Expires August 31, 2013               [Page 16]

Internet-Draft     Application-Level Profile Semantics     February 2013


3.  Instructions on Applying ALPS to Existing Media Types

   ALPS documents can be applied to many existing hypermedia types.
   Below are a set of instructional examples on how to apply ALPS
   information to existing media types.  These examples are informative.
   The most up-to-date guidance on applying ALPS documents to existing
   media types are available at the official ALPS Web site
   (http://alps.io).

   [LR:say what it takes to explain how alps applies to a media type you
   have to define "enclosing element", "link", etc]

3.1.  A Simple ALPS Document

   [TK]

3.2.  HTML Example

   [TK]

3.3.  Collection+JSON Example

3.4.  Linking to ALPS Documents

   When a representation links to an ALPS document describing its
   semantics, the "profile" link relation (found in the IANA link
   registry) SHOULD be used to describe the relationship between the
   representation and the ALPS document.

   A single representation may be "profile"-ed more than one ALPS
   document.  If two ALPS documents give conflicting semantics for the
   same element, the document linked to earlier in the representation
   SHOULD take precedence.

4.  The ALPS Registry

4.1.  What is the ALPS Registry

   [TK]

4.2.  Searching the Registry

   [TK]

4.3.  Contributing to the Registry

   [TK]




Amundsen & Richardson    Expires August 31, 2013               [Page 17]

Internet-Draft     Application-Level Profile Semantics     February 2013


5.  IANA Considerations

   This specification establishes two media types: 'application/
   alps+xml' and 'application/alps+json'

5.1.  application/alps+xml

   Type name:  application

   Subtype name:  alps+xml

   Required parameters:  None

   Optional parameters:

      charset  This parameter has identical semantics to the charset
         parameter of the 'application/xml' media type as specified in
         [RFC3023].

   Encoding considerations:

      binary  Same as encoding considerations of application/xml as
         specified in [RFC3023].

   Security considerations:  This format shares security issues common
      to all XML content types.  It does not provide executable content.
      Information contained in ALPS documents do not require privacy or
      integrity services.

   Interoperability considerations:  ALPS is not described by a DTD and
      applies only the well-formedness rules of XML.  It should only be
      parsed by a non-validating parser.

   Published specification:  This Document

   Applications that use this media type:  Various

   Additional information:

      magic number(s):  none

      file extensions:  .xml

      macintosh type file code:  TEXT







Amundsen & Richardson    Expires August 31, 2013               [Page 18]

Internet-Draft     Application-Level Profile Semantics     February 2013


      object idenfiers:  none

   person to contact for further information:

      Name:  Mike Amundsen

      Email:  mca@amundsen.com

   Intended usage:  Common

   Author/change controller:  Mike Amundsen

5.2.  application/alps+json

   Type name:  application

   Subtype name:  alps+json

   Required parameters:  None

   Optional parameters:  None

   Encoding considerations:  binary

   Security considerations:  This media type shares security issues
      common to all JSON content types.  See [RFC4627] Section #6 for
      additional information.  ALPS+JSON does not provide executable
      content.  Information contained in ALPS+JSON documents do not
      require privacy or integrity services.

   Interoperability considerations:  None

   Published specification:  This Document

   Applications that use this media type:  Various

   Additional information:

      magic number(s):  none

      file extensions:  .json

      macintosh type file code:  TEXT

      object idenfiers:  none






Amundsen & Richardson    Expires August 31, 2013               [Page 19]

Internet-Draft     Application-Level Profile Semantics     February 2013


   person to contact for further information:

      Name:  Mike Amundsen

      Email:  mca@amundsen.com

   Intended usage:  Common

   Author/change controller:  Mike Amundsen

6.  Internationalization Considerations

   [TK]

   [[anchor17: insert text (consider rfc 5987)]]

7.  Acknowledgements

   [TK]

8.  References

8.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC3023]  Murata, M., St. Laurent, S., and D. Kohn, "XML Media
              Types", RFC 3023, January 2001.

   [RFC4627]  Crockford, D., "The application/json Media Type for
              JavaScript Object Notation (JSON)", RFC 4627, July 2006.

   [RFC5988]  Nottingham, M., "Web Linking", RFC 5988, October 2010.

8.2.  Informative References

Authors' Addresses

   Mike Amundsen
   Layer 7 Technologies

   EMail: mca@amundsen.com
   URI:   http://amundsen.com







Amundsen & Richardson    Expires August 31, 2013               [Page 20]

Internet-Draft     Application-Level Profile Semantics     February 2013


   Leonard Richardson

   EMail: leonardr@segfault.org
   URI:   http://crummy.com















































Amundsen & Richardson    Expires August 31, 2013               [Page 21]

